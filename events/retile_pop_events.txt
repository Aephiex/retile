#########################################
#
# Retile Pop Events
# Author: Gebnar
#
#########################################

#########################################
### Pop Job Searching

namespace = retile_pop

############################################
### Regular Pop Migration

# Planets ask for migration if they have un-filled jobs
planet_event = {
	id = retile_pop.1
	hide_window = yes

	pre_triggers = { has_owner = yes }
	
	trigger = {
		owner = { NOT = { has_policy_flag = migration_forbidden } }
		num_pops > 0
		is_under_colonization = no
		has_orbital_bombardment = no
		is_occupied_flag = no
		is_controlled_by = owner
		free_jobs > 0
		owner = { is_country_type = default }	# don't bother with non-playable countries. Also it's safer.
		NOT = { has_modifier = penal_colony }
	}

	mean_time_to_happen = {
		days = 30
	}

	immediate = {
		if = {
			limit = { planet_needs_workers = yes }
			set_timed_planet_flag = { flag = planet_needs_workers days = 30 }
			owner = { set_timed_country_flag = { flag = country_needs_workers days = 30 } }
		}
		if = {
			limit = { planet_needs_combat_specialists = yes }
			set_timed_planet_flag = { flag = planet_needs_combat_specialists days = 30 }
			owner = { set_timed_country_flag = { flag = country_needs_combat_specialists days = 30 } }
		}
		if = {
			limit = { planet_needs_robot_specialists = yes }
			set_timed_planet_flag = { flag = planet_needs_robot_specialists days = 30 }
			owner = { set_timed_country_flag = { flag = country_needs_robot_specialists days = 30 } }
		}
		if = {
			limit = { planet_needs_synth_specialists = yes }
			set_timed_planet_flag = { flag = planet_needs_synth_specialists days = 30 }
			owner = { set_timed_country_flag = { flag = country_needs_synth_specialists days = 30 } }
		}
		if = {
			limit = { planet_needs_rulers = yes }
			set_timed_planet_flag = { flag = planet_needs_rulers days = 30 }
			owner = { set_timed_country_flag = { flag = country_needs_rulers days = 30 } }
		}
	}
}

# Planet needs to migrate a pop for some reason. Choose a preferable pop at random.
# THIS = planet
planet_event = {
	id = retile_pop.90
	hide_window = yes
	is_triggered_only = yes
	
	trigger = { always = yes }
	
	immediate = {
		random_owned_pop = {
			limit = {
				is_sapient = yes
				NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
			}
			weights = {
				base = 1
				modifier = { add = 20 is_plantoid = no root = { habitability = { who = prev value <= 0 } } }
				modifier = { add = 19 is_plantoid = no root = { habitability = { who = prev value <= 0.05 } } }
				modifier = { add = 18 is_plantoid = no root = { habitability = { who = prev value <= 0.10 } } }
				modifier = { add = 17 is_plantoid = no root = { habitability = { who = prev value <= 0.15 } } }
				modifier = { add = 16 is_plantoid = no root = { habitability = { who = prev value <= 0.20 } } }
				modifier = { add = 15 is_plantoid = no root = { habitability = { who = prev value <= 0.25 } } }
				modifier = { add = 14 is_plantoid = no root = { habitability = { who = prev value <= 0.30 } } }
				modifier = { add = 13 is_plantoid = no root = { habitability = { who = prev value <= 0.35 } } }
				modifier = { add = 12 is_plantoid = no root = { habitability = { who = prev value <= 0.40 } } }
				modifier = { add = 11 is_plantoid = no root = { habitability = { who = prev value <= 0.45 } } }
				modifier = { add = 10 is_plantoid = no root = { habitability = { who = prev value <= 0.50 } } }
				modifier = { add = 9 is_plantoid = no root = { habitability = { who = prev value <= 0.55 } } }
				modifier = { add = 8 is_plantoid = no root = { habitability = { who = prev value <= 0.60 } } }
				modifier = { add = 7 is_plantoid = no root = { habitability = { who = prev value <= 0.65 } } }
				modifier = { add = 6 is_plantoid = no root = { habitability = { who = prev value <= 0.70 } } }
				modifier = { add = 5 is_plantoid = no root = { habitability = { who = prev value <= 0.75 } } }
				modifier = { add = 4 is_plantoid = no root = { habitability = { who = prev value <= 0.80 } } }
				modifier = { add = 3 is_plantoid = no root = { habitability = { who = prev value <= 0.85 } } }
				modifier = { add = 2 is_plantoid = no root = { habitability = { who = prev value <= 0.90 } } }
				modifier = { add = 1 is_plantoid = no root = { habitability = { who = prev value <= 0.95 } } }
				modifier = {
					# Prioritize moving laborers that are needed elsewhere
					mult = 2
					has_job = laborer
					OR = {
						AND = {
							owner = { has_country_flag = country_needs_robot_specialists }
							robot_specialist_job_check_trigger = yes
						}
						AND = {
							owner = { has_country_flag = country_needs_combat_specialists }
							combat_specialist_job_check_trigger = yes
						}
						AND = {
							owner = { has_country_flag = country_needs_droid_specialists }
							droid_specialist_job_check_trigger = yes
						}
						AND = {
							owner = { has_country_flag = country_needs_synth_specialists }
							synth_specialist_job_check_trigger = yes
						}
						AND = {
							owner = { has_country_flag = country_needs_rulers }
							ruler_job_check_trigger = yes
						}
					}
				}
			}
			pop_event = { id = retile_pop.91 }
		}
	}
}

# A pop has been chosen to migrate. Choose a preferable destination at random.
# THIS = pop
# FROM = planet
pop_event = {
	id = retile_pop.91
	hide_window = yes
	is_triggered_only = yes

	trigger = { always = yes }
	
	immediate = {
		owner = { random_owned_planet = {
			limit = {
				free_housing > 0
				NOT = { has_modifier = penal_colony }
				is_under_colonization = no
				NOT = { is_same_value = FROM }
				is_occupied_flag = no
				has_orbital_bombardment = no
				is_controlled_by = owner
			}
			weights = {
				base = 1
				modifier = { add = 1 habitability = { who = root value >= 0.05 } }
				modifier = { add = 2 habitability = { who = root value >= 0.10 } }
				modifier = { add = 3 habitability = { who = root value >= 0.15 } }
				modifier = { add = 4 habitability = { who = root value >= 0.20 } }
				modifier = { add = 5 habitability = { who = root value >= 0.25 } }
				modifier = { add = 6 habitability = { who = root value >= 0.30 } }
				modifier = { add = 7 habitability = { who = root value >= 0.35 } }
				modifier = { add = 8 habitability = { who = root value >= 0.40 } }
				modifier = { add = 9 habitability = { who = root value >= 0.45 } }
				modifier = { add = 10 habitability = { who = root value >= 0.50 } }
				modifier = { add = 11 habitability = { who = root value >= 0.55 } }
				modifier = { add = 12 habitability = { who = root value >= 0.60 } }
				modifier = { add = 13 habitability = { who = root value >= 0.65 } }
				modifier = { add = 14 habitability = { who = root value >= 0.70 } }
				modifier = { add = 15 habitability = { who = root value >= 0.75 } }
				modifier = { add = 16 habitability = { who = root value >= 0.80 } }
				modifier = { add = 17 habitability = { who = root value >= 0.85 } }
				modifier = { add = 18 habitability = { who = root value >= 0.90 } }
				modifier = { add = 19 habitability = { who = root value >= 0.95 } }
				modifier = { add = 20 habitability = { who = root value >= 1.00 } }
				modifier = {
					# Prioritize moving to a planet where we're needed
					mult = 2
					root = { has_job = laborer }
					OR = {
						AND = {
							has_planet_flag = planet_needs_robot_specialists
							root = { robot_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_combat_specialists
							root = { combat_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_droid_specialists
							root = { droid_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_synth_specialists
							root = { synth_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_rulers
							root = { ruler_job_check_trigger = yes }
						}
					}
				}
			}
			
			# Clear flags if we fulfilled a request
			if = {
				limit = {
					has_planet_flag = planet_needs_robot_specialists
					root = { robot_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_robot_specialists
				owner = { remove_country_flag = planet_needs_robot_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_combat_specialists
					root = { combat_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_combat_specialists
				owner = { remove_country_flag = planet_needs_combat_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_droid_specialists
					root = { droid_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_droid_specialists
				owner = { remove_country_flag = planet_needs_droid_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_rulers
					root = { ruler_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_rulers
				owner = { remove_country_flag = planet_needs_rulers }
			}
			
			resettle_pop = { pop = root planet = this}
		} }
	}
}


# Migrate periodically if housing is full.
planet_event = {
	id = retile_pop.100
	hide_window = yes

	pre_triggers = { has_owner = yes }
	
	trigger = {
		owner = { NOT = { has_policy_flag = migration_forbidden } }
		num_pops > 1
		is_under_colonization = no
		has_orbital_bombardment = no
		is_occupied_flag = no
		is_controlled_by = owner
		free_housing < 0
		owner = { is_country_type = default }	# don't bother with non-playable countries. Also it's safer.
		NOT = { has_modifier = penal_colony }
	}

	mean_time_to_happen = {
		days = 60
	}

	immediate = {
		planet_event = { id = retile_pop.90 }
	}
}

# Migrate immediately on pop growth if there's no room
# This = Planet scope
# From = Country
# FromFrom = Pop
planet_event = {
	id = retile_pop.101
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = { NOT = { has_policy_flag = migration_forbidden } }
	}

	immediate = {
		if = {
			limit = {
				num_pops > 1
				exists = owner
				owner = { is_country_type = default }	# don't bother with non-playable countries. Also it's safer.
				free_housing < 1
				NOT = { has_modifier = penal_colony }
				is_occupied_flag = no
				has_orbital_bombardment = no
				is_controlled_by = owner
			}
			planet_event = { id = retile_pop.90 }
		}
	}
}

############################################
### Pop shuffling migration

# new version - based on retile_pop.91
pop_event = {
	id = retile_pop.110
	hide_window = yes

	trigger = {
		exists = owner
		exists = planet
		is_sapient = yes
	}
	
	mean_time_to_happen = { days = 360 } # check about once/year
	
	immediate = {
		if = {
			limit = {
				owner = {
					is_country_type = default
					OR = {
						num_owned_planets > 1
						any_relation = {
							count >= 1
							has_migration_access = prev
						}
					}
				}
				planet = { # regular migration conditions
					NOT = { has_planet_flag = retile_recent_shuffling }
					num_pops > 1
					NOT = { has_modifier = penal_colony }
					is_under_colonization = no
					is_occupied_flag = no
					has_orbital_bombardment = no
					is_controlled_by = owner
				}
				NOR = {	# non-sentient robots don't care where they live...
					has_trait = trait_mechanical
					has_trait = trait_droid
				}
			}
			
			# choose between internal and external migration
			random_list = {
				########################################################### Migration Delay
				50 = {
					# think about migrating about once every 5 years,
					# the rest of the time this "nothing" list item happens
					modifier = {	# plantoids think about it more like every 20 years...
						add = 150
						is_plantoid = yes
					}
					modifier = {	# high habitability - move less often
						factor = 2
						is_plantoid = no
						planet = { habitability = { who = root value > 0.90 } }
					}
					modifier = {
						factor = 2
						is_plantoid = no
						planet = { habitability = { who = root value > 0.70 } }
					}
					modifier = {	# low habitability - move more often
						factor = 0.5
						is_plantoid = no
						planet = { habitability = { who = root value < 0.50 } }
					}
					modifier = {
						factor = 0.5
						is_plantoid = no
						planet = { habitability = { who = root value < 0.25 } }
					}
					modifier = {
						factor = 0.5
						is_plantoid = no
						planet = { habitability = { who = root value < 0.10 } }
					}
					modifier = {	# high stability - move less often
						factor = 2
						planet = { planet_stability > 80 }
					}
					modifier = {
						factor = 2
						planet = { planet_stability > 60 }
					}
					modifier = {	# low stability - move more often
						factor = 0.5
						planet = { planet_stability < 40 }
					}
					modifier = {
						factor = 0.5
						planet = { planet_stability < 20 }
					}
					modifier = {	# high crime - move more often
						factor = 0.5
						planet = { planet_crime > 33 }
					}
					modifier = {
						factor = 0.5
						planet = { planet_crime > 66 }
					}
					modifier = {
						factor = 0.5
						planet = { planet_crime > 99 }
					}
					modifier = {	# low pollution - move less often
						factor = 2
						planet = { free_amenities < 0 }
					}
					modifier = {	# high pollution - move more often
						factor = 0.5
						planet = { free_amenities > 500 }
					}
					modifier = {
						factor = 0.5
						planet = { free_amenities > 1000 }
					}
					modifier = {
						factor = 0.5
						planet = { free_amenities > 1500 }
					}
					modifier = {	# traits modify migration frequency
						factor = 0.5
						OR = {
							has_trait = trait_nomadic
							has_trait = trait_arthropoid_wing
						}
					}
					modifier = {
						factor = 2
						has_trait = trait_sedentary
					}	
				}
				10 = { # performance optimization, and numbers tweak: put internal/foreign
					random_list = { # checks in here so they only happen if the pop decides to migrate
						1 = {} # In case other things end up at weight 0, do nothing
						
						########################################################### Internal Migration
						0 = {
							modifier = { # minimum requirements
								add = 100 # base chance to migrate internally
								owner = { has_policy_flag = migration_allowed }
								owner = { num_owned_planets > 1 }
							}
							# migrate inside country
							owner = { country_event = { id = retile_pop.111 } }
						}
						
						########################################################### Foreign Migration
						0 = {
							modifier = { # minimum requirements
								add = 30 # base chance of foreign migration
								
								# species must not be prohibited from leaving the country
								NOT = { has_migration_control = yes }
								
								# can't migrate out if ethics-matching is required, and pop matches our ethics
								NOT = { owner = {
									has_policy_flag = foreign_migration_ethics
									OR = {
										AND = { is_pacifist = yes		root = { is_pacifist = yes } }
										AND = { is_militarist = yes		root = { is_militarist = yes } }
										AND = { is_spiritualist = yes	root = { is_spiritualist = yes } }
										AND = { is_materialist = yes	root = { is_materialist = yes } }
										AND = { is_xenophobe = yes		root = { is_xenophobe = yes } }
										AND = { is_xenophile = yes		root = { is_xenophile = yes } }
										AND = { is_authoritarian = yes	root = { is_authoritarian = yes } }
										AND = { is_egalitarian = yes	root = { is_egalitarian = yes } }
									}
								} }
								
								# must have another country that pops can migrate to
								# respect ethics-matching requirements of other countries
								owner = { any_relation = {
									count >= 1
									has_migration_access = root.owner
									any_owned_planet = { free_housing > 0 }
									OR = {
										NOT = { has_policy_flag = foreign_migration_ethics }
										
										AND = { is_pacifist = yes		root = { is_pacifist = yes } }
										AND = { is_militarist = yes		root = { is_militarist = yes } }
										AND = { is_spiritualist = yes	root = { is_spiritualist = yes } }
										AND = { is_materialist = yes	root = { is_materialist = yes } }
										AND = { is_xenophobe = yes		root = { is_xenophobe = yes } }
										AND = { is_xenophile = yes		root = { is_xenophile = yes } }
										AND = { is_authoritarian = yes	root = { is_authoritarian = yes } }
										AND = { is_egalitarian = yes	root = { is_egalitarian = yes } }
									}
								} }
							}
							
							# If none of our possible destinations give us rights, let's reconsider...
							modifier = {
								factor = 0.2
								owner = { any_relation = {
									count < 1
									has_migration_access = root.owner
									any_owned_planet = { free_housing > 0 }
									if = {
										limit = {
											root = { is_same_species = prev }
										}
										always = yes
									} else_if = {
										limit = {
											root = {
												OR = {
													has_trait = trait_machine_unit
													has_trait = trait_synthetic
												}
											}
										}
										has_policy_flag = ai_full_rights
									} else = {
										has_policy_flag = alien_full_rights
									}
								} }
							}
							
							# Migrate less often if we're at a negative ratio, more if we're positive
							modifier = {
								factor = 0.5
								owner = { check_variable = { which = retile_migration_delta value < 0 } }
							}
							modifier = {
								factor = 2
								owner = { check_variable = { which = retile_migration_delta value > 0 } }
							}
							
							# migrate less often if our friends are at positive ratios, or more often if they're negative
							modifier = {
								factor = 2
								owner = { any_relation = {
									count >= 1
									has_migration_access = root.owner
									any_owned_planet = { free_housing > 0 }
									check_variable = { which = retile_migration_delta value < 0 }
								} }
							}
							modifier = {
								factor = 0.5
								owner = { any_relation = {
									count < 1
									has_migration_access = root.owner
									any_owned_planet = { free_housing > 0 }
									check_variable = { which = retile_migration_delta value <= 0 }
								} }
							}
							
							# pick a relation to migrate to, based on some factors...
							random_country = {
								limit = {
									is_country_type = default
									has_migration_access = root.owner
									any_owned_planet = { free_housing > 0 }
								}
								weights = {
									base = 1
									
									# favor relations with lower migration ratio
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 20 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 15 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 12 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 9 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 7 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 5 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 3 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 2 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 1 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < 0 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -1 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -2 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -3 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -5 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -7 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -9 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -12 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -15 } }
									modifier = { add = 1 check_variable = { which = retile_migration_delta value < -20 } }
									
									# Favor relations with ethics that match the pop
									modifier = {
										mult = 2
										OR = {
											AND = { is_pacifist = yes		root = { is_pacifist = yes } }
											AND = { is_militarist = yes		root = { is_militarist = yes } }
											AND = { is_spiritualist = yes	root = { is_spiritualist = yes } }
											AND = { is_materialist = yes	root = { is_materialist = yes } }
											AND = { is_xenophobe = yes		root = { is_xenophobe = yes } }
											AND = { is_xenophile = yes		root = { is_xenophile = yes } }
											AND = { is_authoritarian = yes	root = { is_authoritarian = yes } }
											AND = { is_egalitarian = yes	root = { is_egalitarian = yes } }
										}
									}
									
									# Try very hard to go places where you will have rights...
									modifier = {
										mult = 20
										if = {
											limit = {
												root = { is_same_species = prev }
											}
											always = yes
										} else_if = {
											limit = {
												root = {
													OR = {
														has_trait = trait_machine_unit
														has_trait = trait_synthetic
													}
												}
											}
											has_policy_flag = ai_full_rights
										} else = {
											has_policy_flag = alien_full_rights
										}
									}
								}
								
								# migrate pop into chosen country...
								country_event = { id = retile_pop.112 }
							}
						}
					}
				}
			}
		}
	}
}

# migrate pop inside country
# from = pop
country_event = {
	id = retile_pop.111
	hide_window = yes
	is_triggered_only = yes

	trigger = { always = yes }

	immediate = {
		random_owned_planet = {
			limit = {
				free_housing >= 0	# care less about housing with this - we're going to fire the internal migrate event afterward if housing is low...
				NOT = { has_modifier = penal_colony }
				is_under_colonization = no
				NOT = { is_same_value = from.planet }
				is_occupied_flag = no
				has_orbital_bombardment = no
				is_controlled_by = owner
			}
			weights = {
				base = 1
				modifier = { add = 1 		habitability = { who = from value >= 0.05 } }
				modifier = { add = 2 		habitability = { who = from value >= 0.10 } }
				modifier = { add = 3 		habitability = { who = from value >= 0.15 } }
				modifier = { add = 4 		habitability = { who = from value >= 0.20 } }
				modifier = { add = 5 		habitability = { who = from value >= 0.25 } }
				modifier = { add = 6 		habitability = { who = from value >= 0.30 } }
				modifier = { add = 7 		habitability = { who = from value >= 0.35 } }
				modifier = { add = 8 		habitability = { who = from value >= 0.40 } }
				modifier = { add = 9 		habitability = { who = from value >= 0.45 } }
				modifier = { add = 10		habitability = { who = from value >= 0.50 } }
				modifier = { add = 11 		habitability = { who = from value >= 0.55 } }
				modifier = { add = 12 		habitability = { who = from value >= 0.60 } }
				modifier = { add = 13 		habitability = { who = from value >= 0.65 } }
				modifier = { add = 14 		habitability = { who = from value >= 0.70 } }
				modifier = { add = 15 		habitability = { who = from value >= 0.75 } }
				modifier = { add = 16 		habitability = { who = from value >= 0.80 } }
				modifier = { add = 17 		habitability = { who = from value >= 0.85 } }
				modifier = { add = 18 		habitability = { who = from value >= 0.90 } }
				modifier = { add = 19 		habitability = { who = from value >= 0.95 } }
				modifier = { add = 20 		habitability = { who = from value >= 1.00 } }
				modifier = { mult = 2 		free_jobs > 0 }
				modifier = { mult = 2 		free_housing > 0 }
				modifier = { mult = 1.5		planet_stability > 50 }
				modifier = { mult = 1.5		planet_crime < 1 }
				modifier = { mult = 1.5		is_planet_class = pc_city }
			}
			
			# We successfully found a destination planet. Set this flag before resettling the pop...
			from.planet = { set_timed_planet_flag = { flag = retile_recent_shuffling days = 360 } }
			
			# Clear flags if we fulfilled a request
			if = {
				limit = {
					has_planet_flag = planet_needs_robot_specialists
					from = { robot_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_robot_specialists
				owner = { remove_country_flag = planet_needs_robot_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_combat_specialists
					from = { combat_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_combat_specialists
				owner = { remove_country_flag = planet_needs_combat_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_droid_specialists
					from = { droid_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_droid_specialists
				owner = { remove_country_flag = planet_needs_droid_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_rulers
					from = { ruler_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_rulers
				owner = { remove_country_flag = planet_needs_rulers }
			}
			
			resettle_pop = { pop = from planet = this}
			
			# immediately fire the periodic migration script, in case the new planet is now over housing or something...
			planet_event = { id = retile_pop.100 }
		}
	}
}

# migrate pop between countries
# from = pop
country_event = {
	id = retile_pop.112
	hide_window = yes
	is_triggered_only = yes

	trigger = { always = yes }

	immediate = {
		# Same planet migration logic as internal migration
		random_owned_planet = {
			limit = {
				free_housing >= 0	# care less about housing with this - we're going to fire the internal migrate event afterward if housing is low...
				NOT = { has_modifier = penal_colony }
				is_under_colonization = no
				# NOT = { is_same_value = from.planet } # shouldn't be possible, since they're in different empires...
				is_occupied_flag = no
				has_orbital_bombardment = no
				is_controlled_by = owner
			}
			weights = {
				base = 1
				modifier = { add = 1 		habitability = { who = from value >= 0.05 } }
				modifier = { add = 2 		habitability = { who = from value >= 0.10 } }
				modifier = { add = 3 		habitability = { who = from value >= 0.15 } }
				modifier = { add = 4 		habitability = { who = from value >= 0.20 } }
				modifier = { add = 5 		habitability = { who = from value >= 0.25 } }
				modifier = { add = 6 		habitability = { who = from value >= 0.30 } }
				modifier = { add = 7 		habitability = { who = from value >= 0.35 } }
				modifier = { add = 8 		habitability = { who = from value >= 0.40 } }
				modifier = { add = 9 		habitability = { who = from value >= 0.45 } }
				modifier = { add = 10		habitability = { who = from value >= 0.50 } }
				modifier = { add = 11 		habitability = { who = from value >= 0.55 } }
				modifier = { add = 12 		habitability = { who = from value >= 0.60 } }
				modifier = { add = 13 		habitability = { who = from value >= 0.65 } }
				modifier = { add = 14 		habitability = { who = from value >= 0.70 } }
				modifier = { add = 15 		habitability = { who = from value >= 0.75 } }
				modifier = { add = 16 		habitability = { who = from value >= 0.80 } }
				modifier = { add = 17 		habitability = { who = from value >= 0.85 } }
				modifier = { add = 18 		habitability = { who = from value >= 0.90 } }
				modifier = { add = 19 		habitability = { who = from value >= 0.95 } }
				modifier = { add = 20 		habitability = { who = from value >= 1.00 } }
				modifier = { mult = 1.5		planet_stability > 50 }
				modifier = { mult = 1.5		planet_crime < 1 }
				modifier = { mult = 1.5		is_planet_class = pc_city }
				modifier = {
					# Prioritize moving to a planet where we're needed
					mult = 2
					from = { has_job = laborer }
					OR = {
						AND = {
							has_planet_flag = planet_needs_robot_specialists
							from = { robot_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_combat_specialists
							from = { combat_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_droid_specialists
							from = { droid_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_synth_specialists
							from = { synth_specialist_job_check_trigger = yes }
						}
						AND = {
							has_planet_flag = planet_needs_rulers
							from = { ruler_job_check_trigger = yes }
						}
					}
				}
			}
			
			# We successfully found a destination planet. Set this flag before resettling the pop...
			from.planet = { set_timed_planet_flag = { flag = retile_recent_shuffling days = 360 } }
			
			# adjust migration ratios
			from.owner = { change_variable = { which = retile_migration_delta value = -1 } }
			root = { change_variable = { which = retile_migration_delta value = 1 } }
			
			# Clear flags if we fulfilled a request
			if = {
				limit = {
					has_planet_flag = planet_needs_robot_specialists
					from = { robot_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_robot_specialists
				owner = { remove_country_flag = planet_needs_robot_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_combat_specialists
					from = { combat_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_combat_specialists
				owner = { remove_country_flag = planet_needs_combat_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_droid_specialists
					from = { droid_specialist_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_droid_specialists
				owner = { remove_country_flag = planet_needs_droid_specialists }
			}
			if = {
				limit = {
					has_planet_flag = planet_needs_rulers
					from = { ruler_job_check_trigger = yes }
				}
				remove_planet_flag = planet_needs_rulers
				owner = { remove_country_flag = planet_needs_rulers }
			}

			resettle_pop = { pop = from planet = this}
			
			# immediately fire the periodic migration script, in case the new planet is now over housing or something...
			planet_event = { id = retile_pop.100 }
		}
	}
}



############################################
### Pop Sprawl

# apply an appropriate pop growth malus to each empire based on the number of planets it has.
country_event = {
	id = retile_pop.200
	hide_window = yes

	trigger = {
		OR = {
			is_country_type = default
			is_country_type = awakened_marauders
			is_country_type = awakened_fallen_empire
		}
		not = { has_country_flag = growth_malus_cleared }
	}

	mean_time_to_happen = {
		days = 90
	}

	after = {
		retile_clear_growth_malus = yes
		set_country_flag = growth_malus_cleared
		#retile_apply_growth_malus = yes
	}
}

############################################
### Planet Abandonment

planet_event = { # retile_abandon_migrate
	id = retile_pop.1002
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	immediate = {
		random_owned_pop = {
			weights = {
				base = 1
				modifier = {
					add = 30
					is_same_species = owner.owner_species
				}
				modifier = {
					add = 20
					is_pop_category = ruler
				}
				modifier = {
					add = 10
					is_pop_category = specialist
				}
			}
			random_list = {
				0 = { # refugee event
					modifier = {
						add = 10
						is_valid_refugee_pop = yes
					}
					modifier = {
						factor = 7
						NOR = {
							is_pop_category = ruler
							is_pop_category = specialist
							is_same_species = owner.owner_species
						}
					}
					modifier = {
						factor = 3
						is_pop_category = specialist
					}
					save_event_target_as = refugee_pop #Must be saved for refugee_pop_effect to work
					refugee_pop_effect = yes					
				}
				0 = { # resettle inside border
					modifier = {
						add = 10
						owner = { any_planet_within_border = {
							NOT = { is_same_value = root }
							is_under_colonization = no
							free_housing > 0
						} }
					}
					modifier = {
						factor = 7
						OR = {
							is_pop_category = ruler
							is_same_species = owner.owner_species
						}
					}
					modifier = {
						factor = 3
						is_pop_category = specialist
					}
					owner = { random_owned_planet = {
						limit = {
							free_housing > 0
							is_under_colonization = no
							NOT = { is_same_value = root }
						}
						resettle_pop = { pop = prevprev planet = this }
					} }
				}
				0 = {
					modifier = {
						add = 50
						is_valid_refugee_pop = no
						NOT = { owner = { any_planet_within_border = {
								NOT = { is_same_value = root.planet }
								is_under_colonization = no
								free_housing > 0
						} } }
					}
					kill_pop = yes
				}
			}
		}
	}
}

pop_event = { # retile_abandon_migrate
	id = retile_pop.1000
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	immediate = {
		random_list = {
			0 = { # refugee event
				modifier = {
					add = 50
					is_valid_refugee_pop = yes
				}
				save_event_target_as = refugee_pop #Must be saved for refugee_pop_effect to work
				refugee_pop_effect = yes					
			}
			0 = { # resettle inside border
				modifier = {
					add = 50
					owner = { any_planet_within_border = {
						NOT = { is_same_value = root.planet }
						is_under_colonization = no
						free_housing > 0
					} }
				}
				owner = { random_owned_planet = {
					limit = {
						free_housing > 0
						is_under_colonization = no
					}
					resettle_pop = { pop = root planet = this }
				} }
			}
			0 = {
				modifier = {
					add = 50
					is_valid_refugee_pop = no
					NOT = { owner = { any_planet_within_border = {
							NOT = { is_same_value = root.planet }
							is_under_colonization = no
							free_housing > 0
					} } }
				}
				kill_pop = yes
			}
		}
	}
}

pop_event = { # retile_abandon_migrate_outside_border
	id = retile_pop.1001
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	immediate = {
		if = {
			limit = { is_valid_refugee_pop = yes }
			save_event_target_as = refugee_pop #Must be saved for refugee_pop_effect to work
			refugee_pop_effect = yes
		} else = {
			kill_pop = yes
		}
	}
}

############################################
### Pop Assimilation

# Assimilate pops
pop_event = {
	id = retile_pop.2000
	hide_window = yes

	pre_triggers = { has_owner = yes }
	
	trigger = {
		owner = { is_country_type = default }
	}

	mean_time_to_happen = {
		days = 360
	}

	immediate = {
		IF = {			# If assimilation status, do assimilation...
			limit = {
				has_citizenship_type = {
					type = citizenship_assimilation
					country = root.owner
				}
			}
			random_list = {
				90 = { } # Null. Should average about 10 years to assimilate a species
				10 = { # Assimilate Pop
					################################ assimilator empire, cyborg ascension
					if = {
						limit = {
							root.owner = { OR = {
								AND = {
									has_authority = auth_machine_intelligence
									has_civic = civic_machine_assimilator
								}
								has_country_flag = flesh_weakened
							} }
						}
						if = {	##### biologicals
							limit = { NOR = {
								has_trait = trait_cybernetic
								has_trait = trait_mechanical
								has_trait = trait_droid
								has_trait = trait_synthetic
							} }
							modify_species = {
								species = this
								add_trait = trait_cybernetic
								add_traits_at_start_of_list = yes
								change_scoped_species = yes # change only this pop's species
							}
							remove_hive_minded = yes # scripted effect
							remove_culture_shock = yes
							remove_self_modified = yes # scripted effect
							if = {
								limit = { root.owner = { has_civic = civic_machine_assimilator } }
								root.owner = { generate_cyborg_treats = yes } # scripted effect
							}
						}
						if = {  ##### mechanicals
							limit = {
								NOT = { has_trait = trait_cybernetic } # probably pointless
								OR = {
									has_trait = trait_mechanical
									has_trait = trait_droid
									has_trait = trait_synthetic
								}
							}
							kill_pop = yes
							root = {
								create_pop = {
									species = root.owner
									ethos = root.owner
								}
							}
							if = {
								limit = { root.owner = { has_civic = civic_machine_assimilator } }
								root.owner = { generate_cyborg_treats = yes } # scripted effect
							}
						}
					}
					################################ hive mind
					else_if = {
						limit = {
							root.owner = {
								has_authority = auth_hive_mind
								NOT = { has_civic = civic_hive_devouring_swarm }
							}
						}
						modify_species = {
							species = this
							add_trait = trait_hive_mind
							add_traits_at_start_of_list = yes
							#change_scoped_species = no
						}
						remove_culture_shock = yes
						remove_self_modified = yes # scripted effect
					}
					################################ ascended synths
					else_if = {
						limit = {
							root.owner = {
								has_country_flag = synthetic_empire
							}
						}
						kill_pop = yes
						root = {
							create_pop = {
								species = root.owner
								ethos = root.owner
							}
						}
					}
					################################ Uplift robots to synths or machines
					else_if = {
						limit = {
							OR = {
								has_trait = trait_mechanical
								has_trait = trait_droid
							}
							OR = {
								root.owner = { has_authority = auth_machine_intelligence }
								root.owner = { any_owned_species = {
									has_species_flag = synthetic_species@root.owner
								} }
							}
						}
						if = {	# uplift to machines
							limit = { from = { has_authority = auth_machine_intelligence } }
							kill_pop = yes
							root = {
								create_pop = {
									species = root.owner
									ethos = root.owner
								}
							}
						}
						else = { # uplift to synths
							root.owner = { random_owned_species = {
								limit = { has_species_flag = synthetic_species@root.owner }
								save_event_target_as = synthetic_species
							} }
							kill_pop = yes
							root = {
								create_pop = {
									species = event_target:synthetic_species
									ethos = root.owner
								}
							}
						}
					}
					################################ hive-pop disconnection
					else_if = {
						limit = {
							root.owner = {
								NOR = {
									has_ethic = ethic_gestalt_consciousness
									has_country_flag = synthetic_empire
									has_country_flag = flesh_weakened
								}
							}
							has_trait = trait_hive_mind
						}
						modify_species = {
							species = this
							remove_trait = trait_hive_mind
							change_scoped_species = yes # change only this pop's species
						}
					}
					################################ Psionic Assimilation ADD OTHER RANDOM OPTIONS TOO
					else_if = {
						limit = {
							root.owner = {
								has_ascension_perk = ap_transcendence
							}
							NOR = {
								has_trait = trait_psionic
								has_trait = trait_latent_psionic
							}
							#has_living_standard = {
							#	country = root
							#	type = psionic_assimilation
							#}
						}
						modify_species = {
							species = this
							add_trait = trait_psionic
							add_traits_at_start_of_list = yes
							change_scoped_species = yes
						}
					}
					################################ ???
					else_if = {
						limit = {
							NOT = { has_trait = trait_psionic}
							has_trait = trait_latent_psionic
						}
						modify_species = {
							species = this
							remove_trait = trait_latent_psionic
							add_traits_at_start_of_list = yes
							change_scoped_species = yes
						}
					}
					################################ set citizenship
					## GEBNAR: I'm not convinced these do anything helpful - I'm gonna just disable them for now...
				#	if = {
				#		limit = { root.owner = { has_authority = auth_machine_intelligence } }
				#		set_citizenship_type = {
				#			type = citizenship_full_machine
				#			country = root.owner
				#		}
				#	}
				#	else = {
				#		set_citizenship_type = {
				#			type = citizenship_full
				#			country = root.owner
				#		}
				#	}
				#	if = {
				#		limit = { root.owner = { has_ethic = ethic_gestalt_consciousness } }
				#		set_living_standard = {
				#			type = living_standard_hive_mind
				#			country = root.owner
				#		}
				#	}
				}
			}
		}
		else = {		# if old ai species, integrate into new one...
			if = {
				limit = {
					root.owner = { is_ai = yes }
					root = { species = { NOT = { has_species_flag = ai_primary_species@root.owner } } }
				}
				random_list = {
					40 = { } # Null. Should average about 5 years to assimilate a species
					10 = { # Assimilate Pop
						root.owner = {
							random_owned_species = {
								limit = {
									any_pop = {
										species = {
											is_same_species = root
											NOT = { is_exact_same_species = root }
											has_species_flag = ai_primary_species@root.owner
										}
									}
								}
								root = { change_species = prev }
							}
						}
					}
				}
			}
		}
	}
}
