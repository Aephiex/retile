#########################################
#
# Retile AI Events
# Author: Gebnar
#
#########################################

namespace = retile_ai

############################################
# TODOS
#
# Flag AI planets for specific kinds of urban development
# Scrub resource buildings if the planet has no jobs of the appropriate type
#
############################################

# Flag AI countries based on their needs
country_event = {
	id = retile_ai.1
	hide_window = yes

	trigger = {
		is_ai = yes
		OR = {
			is_country_type = default
			is_country_type = awakened_marauders
			is_country_type = awakened_fallen_empire
		}
	}
	
	mean_time_to_happen = {
		days = 60
	}

	immediate = {
		remove_country_flag = retile_ai_needs_energy
		remove_country_flag = retile_ai_needs_minerals
		remove_country_flag = retile_ai_needs_food
		remove_country_flag = retile_ai_needs_alloys
		remove_country_flag = retile_ai_needs_consumer_goods
		remove_country_flag = retile_ai_needs_science
		remove_country_flag = retile_ai_needs_energy_crisis
		remove_country_flag = retile_ai_needs_minerals_crisis
		remove_country_flag = retile_ai_needs_food_crisis
		remove_country_flag = retile_ai_needs_alloys_crisis
		remove_country_flag = retile_ai_needs_consumer_goods_crisis
		remove_country_flag = retile_ai_needs_science_crisis
		remove_country_flag = retile_ai_needs_admin
		remove_country_flag = retile_ai_needs_admin_crisis
		remove_country_flag = retile_ai_needs_admin_excess
		
		if = {
			limit = { is_country_type = default }
			### Set sprawl flags
			if = {
				limit = {
					empire_sprawl_cap_fraction > @retile_ai_admin_need
				}
				set_country_flag = retile_ai_needs_admin
			}
			if = {
				limit = {
					empire_sprawl_over_cap > @retile_ai_admin_crisis
				}
				set_country_flag = retile_ai_needs_admin_crisis
			}
			if = {
				limit = {
					empire_sprawl_cap_fraction < @retile_ai_admin_excess
				}
				set_country_flag = retile_ai_needs_admin_excess
			}
		}
		
		### Set resource flags
		if = {
			limit = {
				has_monthly_income = { resource = energy value < @retile_ai_energy_income_high }
			}
			set_country_flag = retile_ai_needs_energy
		}
		if = {
			limit = {
				has_monthly_income = { resource = energy value < @retile_ai_energy_income_low }
			}
			set_country_flag = retile_ai_needs_energy_crisis
		}
		if = {
			limit = {
				has_monthly_income = { resource = minerals value < @retile_ai_minerals_income_high }
			}
			set_country_flag = retile_ai_needs_minerals
		}
		if = {
			limit = {
				has_monthly_income = { resource = minerals value < @retile_ai_minerals_income_low }
			}
			set_country_flag = retile_ai_needs_minerals_crisis
		}
		if = {
			limit = {
				country_uses_food = yes
				has_monthly_income = { resource = food value < @retile_ai_food_income_high }
			}
			set_country_flag = retile_ai_needs_food
		}
		if = {
			limit = {
				country_uses_food = yes
				has_monthly_income = { resource = food value < @retile_ai_food_income_low }
			}
			set_country_flag = retile_ai_needs_food_crisis
		}
		if = {
			limit = {
				has_monthly_income = { resource = alloys value < @retile_ai_alloys_income_high }
			}
			set_country_flag = retile_ai_needs_alloys
		}
		if = {
			limit = {
				has_monthly_income = { resource = alloys value < @retile_ai_alloys_income_low }
			}
			set_country_flag = retile_ai_needs_alloys_crisis
		}
		if = {
			limit = {
				has_monthly_income = { resource = consumer_goods value < @retile_ai_consumer_goods_income_high }
			}
			set_country_flag = retile_ai_needs_consumer_goods
		}
		if = {
			limit = {
				has_monthly_income = { resource = consumer_goods value < @retile_ai_consumer_goods_income_low }
			}
			set_country_flag = retile_ai_needs_consumer_goods_crisis
		}
		if = {
			limit = { retile_ai_has_resource_crisis = no }
			set_country_flag = retile_ai_needs_science
		}
		### Population things...
		set_variable = { which = ai_assemblers_count value = 0 }
		every_owned_planet = {
			if = {
				limit = { has_building = building_assembly }
				change_variable = { which = ai_assemblers_count value = 1 }
			}
		}
		set_variable = { which = ai_hospitals_count value = 0 }
		every_owned_planet = {
			if = {
				limit = { OR = {
					has_building = building_clinic_1
					has_building = building_clinic_2
					has_building = building_clinic_3
					has_building = building_spawning_1
					has_building = building_spawning_2
					has_building = building_spawning_3
				} }
				change_variable = { which = ai_hospitals_count value = 1 }
			}
		}
	}
}

# Remove excess jobs to help solve planetary crisis
planet_event = {
	id = retile_ai.100
	hide_window = yes

	trigger = {
		exists = owner
		owner = {
			is_ai = yes
			OR = {
				is_country_type = default
				is_country_type = awakened_marauders
			#	is_country_type = awakened_fallen_empire
			}
		}
		retile_ai_has_planet_crisis = yes
		free_jobs > 0
	}
	
	mean_time_to_happen = {
		months = 12
	}

	immediate = {
		if = { # maybe we can free up some bureaucrats?
			limit = {
				num_districts = { type = district_bureaucrats value > 0 }
			}
			remove_district = district_bureaucrats
		} else_if = { # maybe we can free up some soldiers?
			limit = {
				num_districts = { type = district_soldiers value > 0 }
				NAND = {
					planet_crime > 0
					owner = { has_policy_flag = criminal_military_police }
				}
			}
			remove_district = district_soldiers
		} else_if = { # maybe we can free up some custodians?
			limit = {
				num_districts = { type = district_custodians value > 1 }	# because we're always allowed to build 1 of these...
				NOT = { free_amenities > 0 }
			}
			remove_district = district_custodians
		} else_if = { # maybe we can free up some enforcers?
			limit = {
				num_districts = { type = district_enforcers value > 1 }		# because we're always allowed to build 1 of these...
				NOT = { planet_crime > 0 }
			}
			remove_district = district_enforcers
		} else_if = { # check for engineering...
			limit = {
				num_districts = { type = district_engineers value > 0 }
				owner = { NOT = { has_country_flag = retile_ai_needs_alloys_crisis } }
				owner = { NOT = { has_country_flag = retile_ai_needs_consumer_goods } }
			}
			remove_district = district_engineers
		} else_if = { # scientists are always safe - and we've put them off as long as possible...
			limit = {
				num_districts = { type = district_scholars value > 0 }
			}
			remove_district = district_scholars
		} else_if = { # we could be more aggressive about engineers...
			limit = {
				num_districts = { type = district_engineers value > 0 }
				owner = { NOT = { has_country_flag = retile_ai_needs_consumer_goods_crisis } }
			}
			remove_district = district_engineers
		}
	}
}

# Scrub excess bureaucrat districts
country_event = {
	id = retile_ai.204
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		has_country_flag = retile_ai_needs_admin_excess
	}
	
	mean_time_to_happen = {
		months = 6
	}

	immediate = {
		random_owned_planet = {
			limit = { has_district = district_bureaucrats }
			remove_district = district_bureaucrats
		}
	}
}

# Scrub excess engineer districts
country_event = {
	id = retile_ai.205
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		OR = {
			has_monthly_income = { resource = energy value < -25 }
			has_monthly_income = { resource = minerals value < -25 }
			has_monthly_income = { resource = food value < -25 }
		}
	}
	
	mean_time_to_happen = {
		months = 6
	}

	immediate = {
		random_owned_planet = {
			limit = { has_district = district_engineers }
			remove_district = district_engineers
		}
	}
}

# Scrub excess custodian districts
planet_event = {
	id = retile_ai.206
	hide_window = yes

	trigger = {
		has_owner = yes
		owner = {
			is_ai = yes
			is_country_type = default
		}
		num_districts = { type = district_custodians value > 1 }	# because we're always allowed to build 1 of these...
		OR = {
			owner = { retile_ai_has_resource_crisis = yes }
			free_amenities < -300
		}
	}
	
	mean_time_to_happen = {
		months = 12
	}

	immediate = {
		remove_district = district_custodians
	}
}

# Scrub excess enforcer districts
planet_event = {
	id = retile_ai.207
	hide_window = yes

	trigger = {
		has_owner = yes
		owner = {
			is_ai = yes
			is_country_type = default
		}
		num_districts = { type = district_enforcers value > 1 }	# because we're always allowed to build 1 of these...
		OR = {
			owner = { retile_ai_has_resource_crisis = yes }
			planet_crime < 1
		}
	}
	
	mean_time_to_happen = {
		months = 12
	}

	immediate = {
		remove_district = district_enforcers
	}
}

# Scrub excess soldier districts
planet_event = {
	id = retile_ai.208
	hide_window = yes

	trigger = {
		has_owner = yes
		owner = {
			is_ai = yes
			is_country_type = default
			OR = {
				retile_ai_has_resource_crisis = yes
				AND = {
					used_naval_capacity_percent < 0.7
					root = { num_districts = { type = district_soldiers value > 1 } }
				}
			}
		}
	}
	
	mean_time_to_happen = {
		months = 12
	}

	immediate = {
		remove_district = district_soldiers
	}
}

# Scrub excess scholar districts
country_event = {
	id = retile_ai.209
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		OR = {
			has_monthly_income = { resource = energy value < -25 }
			has_monthly_income = { resource = minerals value < -25 }
			has_monthly_income = { resource = food value < -25 }
			has_monthly_income = { resource = consumer_goods value < -25 }
			has_monthly_income = { resource = alloys value < -25 }
		}
	}
	
	mean_time_to_happen = {
		months = 6
	}

	immediate = {
		random_owned_planet = {
			limit = { has_district = district_scholars }
			remove_district = district_scholars
		}
	}
}

# Scrub excess housing districts
planet_event = {
	id = retile_ai.210
	hide_window = yes

	trigger = {
	has_owner = yes
		owner = {
			is_ai = yes
			is_country_type = default
		}
		free_district_slots < 1
		#free_jobs < 1				# TODO: Make this care about basic resources or something...
		free_housing > 6
	}
	
	mean_time_to_happen = {
		months = 12
	}

	immediate = {
		remove_district = district_housing
	}
}

# Trade away energy at bad exchange rates, as needed.
country_event = {
	id = retile_ai.2000
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		#has_resource = { type = energy amount > 25000 }
		#has_monthly_income = { resource = energy value > 90 }
		#OR = {
		#	has_resource = { type = minerals amount < 10000}
		#	has_resource = { type = food amount < 10000}
		#	has_resource = { type = alloys amount < 10000}
		#	has_resource = { type = consumer_goods amount < 10000}
		#}
	}
	
	mean_time_to_happen = {
		days = 30
	}

	after = {
		while = { # Resource Surplus Management
			limit = {
				has_resource = { type = energy amount > 25000 }
				OR = {
					has_resource = { type = minerals amount < 10000}
					has_resource = { type = food amount < 10000}
					has_resource = { type = alloys amount < 10000}
					has_resource = { type = consumer_goods amount < 10000}
				}
			}
			random_list = {
				10 = {	# Mineral Trades
					modifier = {
						factor = 0
						has_resource = { type = minerals amount >= 10000}
					}
					modifier = {
						factor = 2
						has_resource = { type = minerals amount < 5000 }
					}
					modifier = {
						factor = 5
						has_resource = { type = minerals amount < 1000 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = minerals value < 25 }
					}
					modifier = {
						factor = 10
						has_monthly_income = { resource = minerals value < 0 }
					}
					add_resource = { energy = -1000 }
					add_resource = { minerals = 500 }
				}
				10 = {	# Food Trades
					modifier = {
						factor = 0
						has_resource = { type = food amount >= 10000}
					}
					modifier = {
						factor = 2
						has_resource = { type = food amount < 5000 }
					}
					modifier = {
						factor = 5
						has_resource = { type = food amount < 1000 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = food value < 25 }
					}
					modifier = {
						factor = 10
						has_monthly_income = { resource = food value < 0 }
					}
					add_resource = { energy = -1000 }
					add_resource = { food = 125 }
				}
				10 = {	# Alloys Trades
					modifier = {
						factor = 0
						has_resource = { type = alloys amount >= 10000}
					}
					modifier = {
						factor = 2
						has_resource = { type = alloys amount < 5000 }
					}
					modifier = {
						factor = 5
						has_resource = { type = alloys amount < 1000 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = alloys value < 25 }
					}
					modifier = {
						factor = 10
						has_monthly_income = { resource = alloys value < 0 }
					}
					add_resource = { energy = -1000 }
					add_resource = { alloys = 125 }
				}
				10 = {	# Supplies Trades
					modifier = {
						factor = 0
						has_resource = { type = consumer_goods amount >= 10000}
					}
					modifier = {
						factor = 2
						has_resource = { type = consumer_goods amount < 5000 }
					}
					modifier = {
						factor = 5
						has_resource = { type = consumer_goods amount < 1000 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = consumer_goods value < 25 }
					}
					modifier = {
						factor = 10
						has_monthly_income = { resource = consumer_goods value < 0 }
					}
					add_resource = { energy = -1000 }
					add_resource = { consumer_goods = 125 }
				}
			}
		}
		while = { # Emergency Resource Purchases
			limit = {
				OR = {
					has_resource = { type = energy amount > 1000 }
					AND = {
						has_resource = { type = energy amount > 500 }
						has_monthly_income = { resource = energy value > 0 }
					}
				}
				OR = {
					AND = {
						has_resource = { type = minerals amount < 100 }
						has_monthly_income = { resource = minerals value < 0 }
					}
					AND = {
						has_resource = { type = food amount < 25 }
						has_monthly_income = { resource = food value < 0 }
					}
					AND = {
						has_resource = { type = consumer_goods amount < 25 }
						has_monthly_income = { resource = consumer_goods value < 0 }
					}
					AND = {
						has_resource = { type = alloys amount < 25 }
						has_monthly_income = { resource = alloys value < 0 }
					}
				}
			}
			random_list = {
				10 = {	# Mineral Trades
					modifier = {
						factor = 0
						OR = {
							has_resource = { type = minerals amount > 100 }
							has_monthly_income = { resource = minerals value > 0 }
						}
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = minerals value < -25 }
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = minerals value < -50 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = minerals value < -100 }
					}
					add_resource = { energy = -200 }
					add_resource = { minerals = 100 }
				}
				10 = {	# Food Trades
					modifier = {
						factor = 0
						OR = {
							has_resource = { type = food amount > 25 }
							has_monthly_income = { resource = food value > 0 }
						}
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = food value < -5 }
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = food value < -10 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = food value < -25 }
					}
					add_resource = { energy = -200 }
					add_resource = { food = 25 }
				}
				3 = {	# Supplies Trades
					modifier = {
						factor = 0
						OR = {
							has_resource = { type = consumer_goods amount > 25 }
							has_monthly_income = { resource = consumer_goods value > 0 }
						}
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = consumer_goods value < -5 }
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = consumer_goods value < -10 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = consumer_goods value < -25 }
					}
					add_resource = { energy = -200 }
					add_resource = { consumer_goods = 25 }
				}
				3 = {	# Alloys Trades
					modifier = {
						factor = 0
						OR = {
							has_resource = { type = alloys amount > 25 }
							has_monthly_income = { resource = alloys value > 0 }
						}
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = alloys value < -5 }
					}
					modifier = {
						factor = 2
						has_monthly_income = { resource = alloys value < -10 }
					}
					modifier = {
						factor = 5
						has_monthly_income = { resource = alloys value < -25 }
					}
					add_resource = { energy = -200 }
					add_resource = { alloys = 25 }
				}
			}
		}
	}
}

# Trade away minerals at bad exchange rates, as needed.
country_event = {
	id = retile_ai.2001
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		#has_resource = { type = minerals amount > 15000 }
		#has_resource = { type = energy amount < 50000 }
		#has_monthly_income = { resource = minerals value > 90 }
	}
	
	mean_time_to_happen = {
		days = 30
	}

	after = {
		while = {	# Resource Surplus Management
			limit = {
				has_resource = { type = minerals amount > 15000 }
				has_resource = { type = energy amount < 50000 }
			}
			add_resource = { minerals = -1000 }
			add_resource = { energy = 500 }
		}
		while = {	# Emergency Resource Trades
			limit = {
				has_resource = { type = minerals amount > 500 }
				has_resource = { type = energy amount < 1000 }
				has_monthly_income = { resource = minerals value > 0 }
				OR = {
					AND = {
						has_resource = { type = food amount < 25 }
						has_monthly_income = { resource = food value < 0 }
					}
					AND = {
						has_resource = { type = consumer_goods amount < 25 }
						has_monthly_income = { resource = consumer_goods value < 0 }
					}
					AND = {
						has_resource = { type = alloys amount < 25 }
						has_monthly_income = { resource = alloys value < 0 }
					}
				}
			}
			add_resource = { minerals = -200 }
			add_resource = { energy = 100 }
		}
	}
}

# Trade away food at bad exchange rates, as needed.
country_event = {
	id = retile_ai.2002
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		#has_resource = { type = food amount > 15000 }
		#has_resource = { type = energy amount < 50000 }
		#has_monthly_income = { resource = food value > 20 }
	}
	
	mean_time_to_happen = {
		days = 30
	}

	after = {
		while = {	# Resource Surplus Management
			limit = {
				has_resource = { type = food amount > 15000 }
				has_resource = { type = energy amount < 50000 }
			}
			add_resource = { food = -250 }
			add_resource = { energy = 500 }
		}
		while = {	# Emergency Resource Trades
			limit = {
				has_resource = { type = food amount > 100 }
				has_resource = { type = energy amount < 1000 }
				has_monthly_income = { resource = food value > 0 }
				OR = {
					AND = {
						has_resource = { type = minerals amount < 100 }
						has_monthly_income = { resource = minerals value < 0 }
					}
					AND = {
						has_resource = { type = consumer_goods amount < 25 }
						has_monthly_income = { resource = consumer_goods value < 0 }
					}
					AND = {
						has_resource = { type = alloys amount < 25 }
						has_monthly_income = { resource = alloys value < 0 }
					}
				}
			}
			add_resource = { minerals = -50 }
			add_resource = { energy = 100 }
		}
	}
}

# Trade away supplies at bad exchange rates, as needed.
country_event = {
	id = retile_ai.2003
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		#has_resource = { type = consumer_goods amount > 15000 }
		#has_resource = { type = energy amount < 50000 }
		#has_monthly_income = { resource = consumer_goods value > 20 }
	}
	
	mean_time_to_happen = {
		days = 30
	}

	after = {
		while = {	# Resource Surplus Management
			limit = {
				has_resource = { type = consumer_goods amount > 15000 }
				has_resource = { type = energy amount < 50000 }
			}
			add_resource = { consumer_goods = -250 }
			add_resource = { energy = 500 }
		}
		while = {	# Emergency Resource Trades
			limit = {
				has_resource = { type = consumer_goods amount > 100 }
				has_resource = { type = energy amount < 1000 }
				has_monthly_income = { resource = consumer_goods value > 0 }
				OR = {
					AND = {
						has_resource = { type = minerals amount < 100 }
						has_monthly_income = { resource = minerals value < 0 }
					}
					AND = {
						has_resource = { type = food amount < 25 }
						has_monthly_income = { resource = food value < 0 }
					}
					AND = {
						has_resource = { type = alloys amount < 25 }
						has_monthly_income = { resource = alloys value < 0 }
					}
				}
			}
			add_resource = { consumer_goods = -50 }
			add_resource = { energy = 100 }
		}
	}
}

# Trade away alloys at bad exchange rates, as needed.
country_event = {
	id = retile_ai.2004
	hide_window = yes

	trigger = {
		is_ai = yes
		is_country_type = default
		#has_resource = { type = alloys amount > 25000 }
		#has_resource = { type = energy amount < 50000 }
		#has_monthly_income = { resource = alloys value > 20 }
	}
	
	mean_time_to_happen = {
		days = 30
	}

	after = {
		while = {	# Resource Surplus Management
			limit = {
				has_resource = { type = alloys amount > 25000 }
				has_resource = { type = energy amount < 50000 }
			}
			add_resource = { alloys = -250 }
			add_resource = { energy = 500 }
		}
		while = {	# Emergency Resource Trades
			limit = {
				has_resource = { type = alloys amount > 100 }
				has_resource = { type = energy amount < 1000 }
				has_monthly_income = { resource = alloys value > 0 }
				OR = {
					AND = {
						has_resource = { type = minerals amount < 100 }
						has_monthly_income = { resource = minerals value < 0 }
					}
					AND = {
						has_resource = { type = food amount < 25 }
						has_monthly_income = { resource = food value < 0 }
					}
					AND = {
						has_resource = { type = consumer_goods amount < 25 }
						has_monthly_income = { resource = consumer_goods value < 0 }
					}
				}
			}
			add_resource = { alloys = -50 }
			add_resource = { energy = 100 }
		}
	}
}

###################################################################################
### AI species limit

# This = Country
# From = Species ( Post Modification )
country_event = {
	id = retile_ai.3000
	hide_window = yes
	is_triggered_only = yes

	trigger = { always = yes }
	
	immediate = {
		country_event = { id = retile_ai.3001 days = 1 }
	}
}

# This/From = Country
# FromFrom = Species ( Post Modification )
country_event = {
	id = retile_ai.3001
	hide_window = yes
	is_triggered_only = yes

	trigger = { always = yes }
	
	immediate = {
		set_timed_country_flag = { flag = ai_recently_modified_species days = 3600 }
		every_country = {
			limit = { num_species > 0 }
			every_owned_pop_species = {
				limit = {
					has_species_flag = ai_primary_species@root
					is_same_species = fromfrom
				}
				remove_species_flag = ai_primary_species@root
			}
		}
		fromfrom = { set_species_flag = ai_primary_species@root }
	}
}